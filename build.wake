
def buildDir = mkdir "build/chisel-iotesters"

def scalacOpts = "-deprecation", "-feature", Nil

# We ignore scalaVersion because it comes from ScalaModule
# The scalaVersion in ivydependencies.json is purely for fetching
def macrosParadiseIvyDep =
  def extractIvyDep json =
    json // `macrosParadise` // `dependencies` | getJString
    | omapPartial stringToIvyDep
    | getOrFail (makeError "macrosParadise ivy dependency not found!")
  readIvyDepsJSON here
  | rmapPass extractIvyDep


global def chisel3IotestersVersion = "1.2-SNAPSHOT"

def buildInfo ver =
  def content =
    "package chisel3.iotesters\n"
    , "import scala.Predef._\n"
    , "/** This object was generated by chisel3-wake */"
    , "case object BuildInfo \{"
    , "  val buildInfoPackage: String = \"chisel3\""
    , "  val version: String = \"{chisel3IotestersVersion}\""
    , "  val scalaVersion: String = \"{ver.scalaVersionToString}\""
    , "  override val toString: String ="
    , "    s\"buildInfoPackage: $buildInfoPackage, version: $version, scalaVersion: $scalaVersion\""
    , "\}"
    , Nil
  def outDir = mkdir "{buildDir.getPathName}/buildInfo"
  def outFile = "{outDir.getPathName}/BuildInfo.scala"
  write outFile (content | catWith "\n")

global def chisel3IotestersScalaModule =
  def base =
    makeScalaModuleFromJSON here "chisel3-iotesters"
    | setScalaModuleRootDir "chisel-iotesters"
    | setScalaModuleDeps (chisel3, Nil)
    | setScalaModuleScalacOptions scalacOpts
  def genSrcs Unit = buildInfo base.getScalaModuleScalaVersion, Nil
  base
  | setScalaModuleFnGeneratedSources genSrcs
